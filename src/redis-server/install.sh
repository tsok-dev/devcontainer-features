#!/usr/bin/env bash
#
# Redis Server Installation Script for Dev Containers
# This script installs and configures Redis server to run automatically
#

set -euo pipefail

# Configuration variables
REDIS_VERSION="${VERSION:-"latest"}"
REDIS_DATA_DIR="/var/lib/redis-server/data"
REDIS_LOG_DIR="/var/log/redis"
REDIS_CONFIG_DIR="/etc/redis"
REDIS_CONFIG_FILE="/etc/redis/redis.conf"
REDIS_SERVICE_FILE="/etc/systemd/system/redis-server.service"
REDIS_INIT_SCRIPT="/usr/local/share/redis-server-init.sh"

# Determine the non-root user
USERNAME="${USERNAME:-"${_REMOTE_USER:-"automatic"}"}"
if [[ "${USERNAME}" == "automatic" ]]; then
    USERNAME=""
    POSSIBLE_USERS="vscode node codespace $(awk -F: '$3>=1000 && $3!=65534 {print $1}' /etc/passwd)"
    for CURRENT_USER in ${POSSIBLE_USERS}; do
        if id -u "${CURRENT_USER}" > /dev/null 2>&1; then
            USERNAME=${CURRENT_USER}
            break
        fi
    done
    if [[ "${USERNAME}" == "" ]]; then
        USERNAME=root
    fi
elif [[ "${USERNAME}" == "none" ]] || ! id -u "${USERNAME}" > /dev/null 2>&1; then
    USERNAME=root
fi

# Logging functions
log_info() {
    echo "[INFO] $*"
}

log_error() {
    echo "[ERROR] $*" >&2
}

log_warning() {
    echo "[WARNING] $*" >&2
}

# Error handler
cleanup_and_exit() {
    log_error "Installation failed. Cleaning up..."
    rm -rf /var/lib/apt/lists/* 2>/dev/null || true
    exit 1
}

trap cleanup_and_exit ERR

# Ensure script is run as root
if [[ "$(id -u)" -ne 0 ]]; then
    log_error "This script must be run as root."
    exit 1
fi

# Package management helpers
update_package_cache() {
    log_info "Updating package cache..."
    if [[ "$(find /var/lib/apt/lists -type f -name '*.list' | wc -l)" -eq 0 ]]; then
        apt-get update -y
    fi
}

install_packages() {
    local packages_to_install=()
    for package in "$@"; do
        if ! dpkg -s "${package}" >/dev/null 2>&1; then
            packages_to_install+=("${package}")
        fi
    done
    
    if [[ ${#packages_to_install[@]} -gt 0 ]]; then
        log_info "Installing packages: ${packages_to_install[*]}"
        update_package_cache
        apt-get install -y --no-install-recommends "${packages_to_install[@]}"
    fi
}

# Create Redis directories with proper permissions
setup_redis_directories() {
    log_info "Setting up Redis directories..."
    
    # Create data directory
    mkdir -p "${REDIS_DATA_DIR}"
    chown -R "${USERNAME}:${USERNAME}" "${REDIS_DATA_DIR}"
    chmod 0755 "${REDIS_DATA_DIR}"
    
    # Create log directory
    mkdir -p "${REDIS_LOG_DIR}"
    chown -R "${USERNAME}:${USERNAME}" "${REDIS_LOG_DIR}"
    chmod 0755 "${REDIS_LOG_DIR}"
    
    # Create config directory
    mkdir -p "${REDIS_CONFIG_DIR}"
    chmod 0755 "${REDIS_CONFIG_DIR}"
}

# Create Redis configuration file
create_redis_config() {
    log_info "Creating Redis configuration file..."
    
    cat > "${REDIS_CONFIG_FILE}" << 'EOF'
# Redis Configuration File
# Generated by devcontainer-features/redis-server

# Basic settings
port 6379
bind 127.0.0.1 ::1
timeout 0
tcp-keepalive 300

# Memory and persistence
save 900 1
save 300 10
save 60 10000
dbfilename dump.rdb
dir /var/lib/redis-server/data

# Logging
loglevel notice
logfile /var/log/redis/redis-server.log

# Security
protected-mode no

# Performance
maxmemory-policy allkeys-lru

# Append only file
appendonly yes
appendfilename "appendonly.aof"
appendfsync everysec

# Disable dangerous commands in container environments
rename-command FLUSHDB ""
rename-command FLUSHALL ""
rename-command DEBUG ""
rename-command CONFIG ""
EOF

    chmod 644 "${REDIS_CONFIG_FILE}"
    chown "${USERNAME}:${USERNAME}" "${REDIS_CONFIG_FILE}"
}

# Create Redis startup script
create_redis_init_script() {
    log_info "Creating Redis initialization script..."
    
    cat > "${REDIS_INIT_SCRIPT}" << 'EOF'
#!/bin/bash
#
# Redis Server Initialization Script for Dev Containers
#

set -euo pipefail

REDIS_CONFIG_FILE="/etc/redis/redis.conf"
REDIS_PID_FILE="/var/run/redis/redis-server.pid"
REDIS_LOG_FILE="/var/log/redis/redis-server.log"

# Ensure PID directory exists
mkdir -p "$(dirname "${REDIS_PID_FILE}")"

# Function to check if Redis is already running
is_redis_running() {
    if [[ -f "${REDIS_PID_FILE}" ]]; then
        local pid=$(cat "${REDIS_PID_FILE}")
        if kill -0 "${pid}" 2>/dev/null; then
            return 0
        else
            rm -f "${REDIS_PID_FILE}"
        fi
    fi
    return 1
}

# Function to start Redis server
start_redis() {
    echo "[$(date)] Starting Redis server..."
    
    if is_redis_running; then
        echo "[$(date)] Redis server is already running"
        return 0
    fi
    
    # Start Redis server in the background
    redis-server "${REDIS_CONFIG_FILE}" --daemonize yes --pidfile "${REDIS_PID_FILE}"
    
    # Wait for Redis to be ready
    local max_attempts=30
    local attempt=0
    
    while [[ ${attempt} -lt ${max_attempts} ]]; do
        if redis-cli ping >/dev/null 2>&1; then
            echo "[$(date)] Redis server started successfully"
            return 0
        fi
        sleep 1
        ((attempt++))
    done
    
    echo "[$(date)] Failed to start Redis server within ${max_attempts} seconds"
    return 1
}

# Function to stop Redis server
stop_redis() {
    echo "[$(date)] Stopping Redis server..."
    
    if ! is_redis_running; then
        echo "[$(date)] Redis server is not running"
        return 0
    fi
    
    redis-cli shutdown || true
    
    # Wait for shutdown
    local max_attempts=10
    local attempt=0
    
    while [[ ${attempt} -lt ${max_attempts} ]] && is_redis_running; do
        sleep 1
        ((attempt++))
    done
    
    if is_redis_running; then
        echo "[$(date)] Force killing Redis server..."
        local pid=$(cat "${REDIS_PID_FILE}")
        kill -TERM "${pid}" 2>/dev/null || true
        sleep 2
        kill -KILL "${pid}" 2>/dev/null || true
        rm -f "${REDIS_PID_FILE}"
    fi
    
    echo "[$(date)] Redis server stopped"
}

# Function to restart Redis server
restart_redis() {
    stop_redis
    start_redis
}

# Function to show Redis status
status_redis() {
    if is_redis_running; then
        echo "Redis server is running (PID: $(cat "${REDIS_PID_FILE}"))"
        redis-cli info server | grep -E "(redis_version|uptime_in_seconds)"
    else
        echo "Redis server is not running"
    fi
}

# Handle script arguments
case "${1:-start}" in
    start)
        start_redis
        ;;
    stop)
        stop_redis
        ;;
    restart)
        restart_redis
        ;;
    status)
        status_redis
        ;;
    *)
        echo "Usage: $0 {start|stop|restart|status}"
        echo "Default action is 'start' if no argument provided"
        exit 1
        ;;
esac
EOF

    chmod +x "${REDIS_INIT_SCRIPT}"
    chown "${USERNAME}:${USERNAME}" "${REDIS_INIT_SCRIPT}"
}

# Get Redis version for installation
get_redis_version() {
    local requested_version="${REDIS_VERSION}"
    
    case "${requested_version}" in
        "latest"|"stable"|"lts")
            echo ""
            ;;
        *)
            # Try to find the exact version
            update_package_cache
            local available_version
            available_version=$(apt-cache show redis-server 2>/dev/null | \
                awk -v v="${requested_version}" '
                    BEGIN { RS=""; found=0 }
                    /Version: [0-9]+:?'"${requested_version}"'(\.|$|-|\+)/ {
                        match($0, /Version: ([^\n]+)/, a)
                        print "=" a[1]
                        found=1
                        exit
                    }'
            )
            
            if [[ -z "${available_version}" ]]; then
                log_warning "Specific Redis version '${requested_version}' not found. Installing latest available version."
                echo ""
            else
                echo "${available_version}"
            fi
            ;;
    esac
}

# Install Redis server
install_redis() {
    log_info "Installing Redis server..."
    
    # Install required packages
    install_packages curl ca-certificates gnupg2 lsb-release
    
    # Get OS information
    . /etc/os-release
    local os_codename="${VERSION_CODENAME}"
    local architecture
    architecture=$(dpkg --print-architecture)
    
    # Add Redis repository
    log_info "Adding Redis repository..."
    curl -fsSL https://packages.redis.io/gpg | gpg --dearmor -o /usr/share/keyrings/redis-archive-keyring.gpg
    echo "deb [arch=${architecture} signed-by=/usr/share/keyrings/redis-archive-keyring.gpg] https://packages.redis.io/deb ${os_codename} main" \
        > /etc/apt/sources.list.d/redis.list
    
    # Update package cache after adding repository
    apt-get update -y
    
    # Determine version suffix
    local version_suffix
    version_suffix=$(get_redis_version)
    
    # Install Redis
    log_info "Installing Redis server${version_suffix:+ version ${version_suffix#=}}..."
    apt-get install -y "redis-server${version_suffix}"
    
    # Stop the default Redis service if it's running
    systemctl stop redis-server 2>/dev/null || true
    systemctl disable redis-server 2>/dev/null || true
}

# Main installation process
main() {
    log_info "Starting Redis server installation..."
    log_info "Target user: ${USERNAME}"
    log_info "Requested version: ${REDIS_VERSION}"
    
    # Install Redis
    install_redis
    
    # Setup directories and configuration
    setup_redis_directories
    create_redis_config
    create_redis_init_script
    
    # Start Redis server
    log_info "Starting Redis server..."
    sudo -u "${USERNAME}" "${REDIS_INIT_SCRIPT}" start
    
    # Verify installation
    if sudo -u "${USERNAME}" redis-cli ping >/dev/null 2>&1; then
        log_info "Redis server installation completed successfully!"
        log_info "Redis is running and responding to ping"
    else
        log_error "Redis server installation failed - server not responding"
        exit 1
    fi
    
    # Clean up
    rm -rf /var/lib/apt/lists/*
    
    log_info "Redis server is ready for use!"
    log_info "Connection: redis://localhost:6379"
    log_info "Data directory: ${REDIS_DATA_DIR}"
    log_info "Log file: ${REDIS_LOG_DIR}/redis-server.log"
    log_info "Control script: ${REDIS_INIT_SCRIPT}"
}

# Run main installation
main "$@"
